<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link rel="self" href="https://j-e-s-s-e.com/feed.xml"/>
  <author>
    <name>Jesse Claven</name>
  </author>
  <id>https://j-e-s-s-e.com</id>
  <title>Notes · Jesse Claven</title>
  <updated>2024-05-21T22:48:28.277905Z</updated>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/a-partially-wrong-tf-idf-in-flix"/>
    <content type="html">&lt;p&gt;Recently I reminded myself of TF-IDF and the relatively simplicity of it, in and of itself. Having considered a Python implementation, and wanting to write &lt;em&gt;something&lt;/em&gt; in Flix&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;, I thought this could be a good opportunity.&lt;/p&gt;
&lt;p&gt;Why is it &lt;em&gt;partially&lt;/em&gt; wrong? Well, because I wrote it, wasn&apos;t 100% happy with the results, but the intent was to quickly try something in Flix!&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-plaintext&quot; translate=&quot;no&quot;&gt;type alias ID = String
type alias Body = String
type alias Document = {id = ID, body = Body}

type alias Token = String

type alias Corpus = List[Document]

type alias IDF = Float64
type alias TF = Map[ID, Int32]
type alias TF_IDF = Float64
type alias Entry = {
    idf = IDF,
    tf = TF
}
type alias Index = Map[Token, Entry]

def idf(n: Int32, tf: TF): Float64 =
    import static java.lang.Math.log(Float64): Float64 \ {};

    ((n &amp;#x2f; Map.size(tf)) + 1)
    |&gt; Int32.toFloat64
    |&gt; log


def incrementFrequency(id: ID, tf: TF): TF =
    Map.insertWith(
        (_new, old) -&gt; old + 1, &amp;#x2f;&amp;#x2f; Increment the frequency of the term
        id,
        1, &amp;#x2f;&amp;#x2f; Initial frequency
        tf
    )

def nextTerm(id: ID, index: Index, term: String): Index =
    let default: Entry = {idf = 0.0, tf = Map#{id =&gt; 1}};

    Map.insertWith(
        &amp;#x2f;&amp;#x2f; Update the entry for the term, if is present in the index
        (_new, old) -&gt; { tf = incrementFrequency(id, old.tf)  | old}, &amp;#x2f;&amp;#x2f; Retain the old IDF
        term, &amp;#x2f;&amp;#x2f; Term as a key
        default, &amp;#x2f;&amp;#x2f; In case term isn&amp;#x27;t present in the index
        index
    )

def nextDoc(index: Index, document: Document): Index =
    let appNextTerm = nextTerm(document.id);
    let tokens = sentenceToTokens(document.body);

    List.foldLeft(appNextTerm, index, tokens)

def sentenceToTokens(sentence: String): List[String] =
    sentence
    |&gt; String.toLowerCase
    |&gt; String.splitOn({substr = &quot; &quot;})

def buildTf(corpus: Corpus): Index =
    let index = Map.empty(); &amp;#x2f;&amp;#x2f; Initialise an empty index

    List.foldLeft(nextDoc, index, corpus)

def buildIdf(n: Int32, index: Index): Index =
    Map.map(entry -&gt; { idf = idf(n, entry.tf) | entry }, index)

pub def buildIndex(corpus: Corpus): Index =
    let n = List.length(corpus); &amp;#x2f;&amp;#x2f; Compute this once

    corpus
    |&gt; buildTf
    |&gt; buildIdf(n)

def retrieve(index: Index, query: String, top_k: Int32): List[(ID, Float64)] =
    let tokens = sentenceToTokens(query);
    let initialDocScores: Map[ID, Float64] = Map.empty();

    tokens
    |&gt; List.foldLeft(
        (docScores, token) -&gt;
            match Map.get(token, index) {
                case None =&gt; docScores
                case Some(entry) =&gt;
                    let docTfIdfs = Map.map(termFreq -&gt; Int32.toFloat64(termFreq) * entry.idf, entry.tf);

                    Map.intersectionWith(
                        (score1, score2) -&gt; score1 + score2,
                        docScores,
                        docTfIdfs
                    )
            },
        initialDocScores
    )
    |&gt; Map.toList
    |&gt; List.sortBy(val -&gt; snd(val))
    |&gt; List.take(top_k)

def main(): Unit \ IO =
    let corpus: Corpus =
        {id = &quot;aaaa&quot;, body = &quot;Hello Giraffe one and giraffe 2&quot;} ::
        {id = &quot;bbbb&quot;, body = &quot;There are lots of animals, like giraffes&quot;} ::
        {id = &quot;cccc&quot;, body = &quot;Why are there lots of animals&quot;} ::
        Nil;
    let index: Index = debug(buildIndex(corpus));
    let query = &quot;where is the giraffe on the moon?&quot;;

    println(retrieve(index, query, 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://flix.dev&quot;&gt;Flix&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;Beyond a previous &lt;a href=&quot;@/notes/programming_imperative_to_functional_to_logic.md&quot;&gt;experiment&lt;/a&gt; trying logic programming with it &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>a-partially-wrong-tf-idf-in-flix</id>
    <title>A partially wrong TF-IDF in Flix</title>
    <updated>2024-05-05T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/missing-s3fs-for-sagemaker-real-time-inference-tutorial"/>
    <content type="html">&lt;p&gt;If you&apos;re getting the following error when going through a AWS SageMaker Studio tutorial&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;, here&apos;s a quick solution I&apos;m writing down, to save someone else searching. It&apos;s as obvious as you&apos;d expect!&lt;/p&gt;
&lt;p&gt;The error:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-plaintext&quot; translate=&quot;no&quot;&gt;ModuleNotFoundError: No module named &amp;#x27;s3fs&amp;#x27;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Earlier in the notebook, install the package:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-plaintext&quot; translate=&quot;no&quot;&gt;%pip install s3fs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, import it:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-python&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-keyword ahl-control ahl-import&quot; style=&quot;color: #E06C75;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;s3fs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/tutorials/machine-learning-tutorial-deploy-model-to-real-time-inference-endpoint/&quot;&gt;Deploy a Machine Learning Model to a Real-Time Inference Endpoint&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>missing-s3fs-for-sagemaker-real-time-inference-tutorial</id>
    <title>Missing `s3fs` for SageMaker real-time inference tutorial</title>
    <updated>2024-03-31T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/programming-imperative-to-functional-to-logic"/>
    <content type="html">&lt;h1&gt;How I started programming&lt;/h1&gt;
&lt;p&gt;This is about my journey with programming languages from imperative to functional to (potentially) logic.&lt;/p&gt;
&lt;p&gt;Similar to &lt;em&gt;most&lt;/em&gt; people, I got into programming with imperative languages. They were the programming languages (PLs) that I used at my first few jobs—specifically, ColdFusion, PHP, Java, Python, JavaScript, and some others.&lt;/p&gt;
&lt;p&gt;Back in high school, I remember our IT teacher briefly introducing us to Prolog, of which I remember very little of, but it&apos;s stuck with me as a &lt;em&gt;neat idea&lt;/em&gt; ever since.&lt;/p&gt;
&lt;p&gt;Then, I worked at a startup that used Go for the API and agents, and then Elm&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt; for the SPA. Why Elm? It was a fortuitous choice by the main frontend engineer. When I joined, there were roughly 4 current software engineers. Why Go? The &lt;em&gt;usual&lt;/em&gt; reasons.&lt;/p&gt;
&lt;p&gt;Elm, or rather functional programming was fascinating and eye-opening, as trite as that sounds. I won&apos;t go into why as others have covered that extensively—though I would like to do so myself one day.&lt;/p&gt;
&lt;p&gt;At my next job, there was another fortuitous choice of PLs of Elixir, since the technical co-founder was familiar with it and that it seemed like the right PL (including OTP) for the job.&lt;/p&gt;
&lt;p&gt;We&apos;ve reached a point in my hobby and career that I&apos;m convinced functional programming is overall, better than imperative programming. It&apos;s more fun too.&lt;/p&gt;
&lt;h1&gt;Okay, so Prolog&lt;/h1&gt;
&lt;p&gt;With Prolog, and the continuous search for The One True Programming Language. I&apos;ve found Flix&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;, which may very well be it. It&apos;s fairly novel in its design. I&apos;ll quote their own answer to their question of &quot;Why Flix?&quot;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flix aims to offer a unique combination of features that no other programming language offers, including: algebraic data types and pattern matching (like Haskell, OCaml), extensible records (like Elm), traits (type classes) (like Haskell, Rust), higher-kinded types (like Haskell), typematch (like Scala), type inference (like Haskell, OCaml), structured channel and process-based concurrency (like Go), and compilation to JVM bytecode (like Scala).&lt;/p&gt;
&lt;p&gt;Flix also supports several unique features, including: a polymorphic effect system, region-based local mutation, purity reflection, and first-class Datalog constraints.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Datalog constraints, or declarative logic programming, combined with so many other ideal features was interesting, and it wasn&apos;t long until I saw an opportunity to try it out.&lt;/p&gt;
&lt;h1&gt;A real world use-case for logic programming/constraint solving&lt;/h1&gt;
&lt;p&gt;At work, there was a snippet of Go code that was used to find running servers that satisfied having a certain capability (read: framework or runtime) to serve a machine learning model.. It would get/have the list of servers and loop through looking for ones that had the desired capability in its list of capabilities, and return those.&lt;/p&gt;
&lt;p&gt;Flix calls the Datalog constraints fixpoints&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-3&quot; id=&quot;fnref-3&quot; data-footnote-ref&gt;3&lt;/a&gt;&lt;/sup&gt;. The Flix book on them was helpful.&lt;/p&gt;
&lt;h1&gt;Implementations by programming approach&lt;/h1&gt;
&lt;p&gt;I quickly threw something together. It&apos;s very simple in that there&apos;s a small set of facts (&lt;code&gt;features()&lt;/code&gt;). It was so simple that I didn&apos;t need to implement any explicit rule(s).&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-plaintext&quot; translate=&quot;no&quot;&gt;def features(): #{ IsCapable(String, String) | r } = #{
        IsCapable(&quot;MLServer&quot;, &quot;TensorFlow&quot;).
        IsCapable(&quot;MLServer&quot;, &quot;Scikit-learn&quot;).
        IsCapable(&quot;Triton&quot;, &quot;PyTorch&quot;).
        IsCapable(&quot;Triton&quot;, &quot;TensorFlow&quot;).
    }

def serversWithCapability(c: String): Vector[String] =
    query features() select server from IsCapable(server, c)

def main(): Unit \ IO =
    Vector#{&quot;TensorFlow&quot;, &quot;PyTorch&quot;, &quot;Transformers&quot;}
    |&gt; Vector.map(serversWithCapability)
    |&gt; println
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-plaintext&quot; translate=&quot;no&quot;&gt;Vector#{Vector#{MLServer, Triton}, Vector#{Triton}, Vector#{}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For comparison, I wrote Elixir and Go versions.&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-elixir&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;Capabilities&lt;/span&gt; &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ahl-punctuation&quot; style=&quot;color: #ABB2BF;&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:mlserver&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;capabilities: &lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:tensorflow&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:scikit_learn&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ahl-punctuation&quot; style=&quot;color: #ABB2BF;&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:triton&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;capabilities: &lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:pytorch&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:tensorflow&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;servers_with_capabilities&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;servers&lt;/span&gt;
    &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;ahl-punctuation&quot; style=&quot;color: #ABB2BF;&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;capabilities: &lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;capabilities&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;-&gt;&lt;/span&gt;
      &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;member?&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;capabilities&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;&amp;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;&amp;&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:tensorflow&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:pytorch&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:transformers&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;&amp;&lt;/span&gt;&lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;Capabilities&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;servers_with_capabilities&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;&amp;#x2f;&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-elixir&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:mlserver&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:triton&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-string ahl-special ahl-symbol&quot; style=&quot;color: #98C379;&quot;&gt;:triton&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NB: I originally used an LLM with the prompt, &quot;Convert this Elixir code to Go&quot;, and received a functionally and syntactically code snippet.&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-go&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-keyword ahl-control ahl-import&quot; style=&quot;color: #E06C75;&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;ahl-namespace&quot; style=&quot;color: #61AFEF;&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;ahl-keyword ahl-control ahl-import&quot; style=&quot;color: #E06C75;&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;ahl-keyword ahl-storage ahl-type&quot; style=&quot;color: #E06C75;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Name&lt;/span&gt;         &lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Capabilities&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ahl-keyword ahl-storage ahl-type&quot; style=&quot;color: #E06C75;&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;mlserver&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Capabilities&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;tensorflow&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;scikit_learn&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;triton&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Capabilities&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;pytorch&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;tensorflow&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ahl-keyword ahl-function&quot; style=&quot;color: #E06C75;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;serversWithCapabilities&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-parameter&quot; style=&quot;color: #E06C75;&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;ahl-keyword ahl-storage ahl-type&quot; style=&quot;color: #E06C75;&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;

	&lt;span class=&quot;ahl-keyword ahl-control ahl-repeat&quot; style=&quot;color: #C678DD;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;ahl-keyword ahl-control ahl-repeat&quot; style=&quot;color: #C678DD;&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;ahl-keyword ahl-control ahl-repeat&quot; style=&quot;color: #C678DD;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;capability&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;ahl-keyword ahl-control ahl-repeat&quot; style=&quot;color: #C678DD;&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Capabilities&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;ahl-keyword ahl-control ahl-conditional&quot; style=&quot;color: #C678DD;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;capability&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-parameter&quot; style=&quot;color: #E06C75;&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-function ahl-builtin&quot; style=&quot;color: #61AFEF;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;ahl-keyword ahl-control ahl-return&quot; style=&quot;color: #C678DD;&quot;&gt;break&lt;/span&gt;
			&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;ahl-keyword ahl-control ahl-return&quot; style=&quot;color: #C678DD;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt;
&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ahl-keyword ahl-function&quot; style=&quot;color: #E06C75;&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;capabilities&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;tensorflow&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;pytorch&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;transformers&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-type ahl-builtin&quot; style=&quot;color: #E5C07B;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;ahl-keyword ahl-control ahl-repeat&quot; style=&quot;color: #C678DD;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;ahl-keyword ahl-control ahl-repeat&quot; style=&quot;color: #C678DD;&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;capabilities&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-function ahl-builtin&quot; style=&quot;color: #61AFEF;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;serversWithCapabilities&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function ahl-method&quot; style=&quot;color: #61AFEF;&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-go&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;mlserver&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;triton&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;triton&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Side-by-side comparison&lt;/h1&gt;
&lt;p&gt;An alternative view of the different implementations that highlights the differences, such as length.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/notes/flix-elixir-go-servers.png&quot;&gt;&lt;img src=&quot;/images/notes/flix-elixir-go-servers.png&quot; alt=&quot;Each implementation side-by-side in VS Code&quot; /&gt;&lt;/a&gt;{:target=&quot;_blank&quot;}&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;I&apos;ve already espoused my view that functional programming is generally preferable to imperative. I view logic programming, in a vague sense, as a higher level of thinking in that there&apos;s less I need to &lt;em&gt;instruct&lt;/em&gt; the computer to do, and can &lt;em&gt;declare&lt;/em&gt; (or, describe) what is to be done, and let it figure it out for me.&lt;/p&gt;
&lt;p&gt;One potential barrier to logic programming being adopted is that who wants to learn a whole new programming langauge that&apos;s very specific, as opposed to Rust, Elixir, Clojure, etc that can solve a wide array of problems.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://elm-lang.org&quot;&gt;Elm&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://flix.dev&quot;&gt;Flix&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.flix.dev/fixpoints.html&quot;&gt;Fixpoints&lt;/a&gt; &lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;3&quot; aria-label=&quot;Back to reference 3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>programming-imperative-to-functional-to-logic</id>
    <title>Programming: Imperative to Functional to Logic</title>
    <updated>2024-02-23T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/makeup-parser-for-swift"/>
    <content type="html">&lt;p&gt;Having switched to using Elixir and NimblePublisher for the backend of my personal website, I&apos;ve needed to improve the availability of Makeup parsers. Firstly, starting with Swift, with &lt;a href=&quot;https://github.com/jesse-c/makeup_swift&quot;&gt;&lt;code&gt;makeup_swift&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&apos;s incredibly bare bones, so far.&lt;/p&gt;
&lt;p&gt;The approach so far is to be fairly true to the Swift Language Reference&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;. The prioritisation is hopefully on the more common parts of the language.&lt;/p&gt;
&lt;p&gt;Contributions are heavily welcomed and encouraged!&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/aboutthelanguagereference&quot;&gt;Swift Language Reference&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>makeup-parser-for-swift</id>
    <title>Makeup parser for Swift</title>
    <updated>2023-08-25T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/raycast-extension-for-himalaya-released"/>
    <content type="html">&lt;p&gt;Previously&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;, I wrote about a paradigm where you had daemon which had multi-UIs that interacted with it. For some time I had wanted to quickly be able to act on emails as they come in. Someone is working on a Raycast extension that uses AppleScript to interact with Mail.app&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-3&quot; id=&quot;fnref-3&quot; data-footnote-ref&gt;3&lt;/a&gt;&lt;/sup&gt;. Whilst it&apos;s tractable, it was taking some time—and then I remembered Himalaya&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-4&quot; id=&quot;fnref-4&quot; data-footnote-ref&gt;4&lt;/a&gt;&lt;/sup&gt;!&lt;/p&gt;
&lt;p&gt;After testing it out, I was happy with it and set out to try and build a Raycast extension&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-5&quot; id=&quot;fnref-5&quot; data-footnote-ref&gt;5&lt;/a&gt;&lt;/sup&gt; around it. I&apos;m happy to further announce that it&apos;s available for us! I&apos;ve already had several new minor versions since the original release.&lt;/p&gt;
&lt;p&gt;Along with this, I got into a discussion with @soywood&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-6&quot; id=&quot;fnref-6&quot; data-footnote-ref&gt;6&lt;/a&gt;&lt;/sup&gt; over email as I had sponsored him on GitHub. It turns out, the paradigm&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1-2&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt; I wrote about, and his own project&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-6&quot; id=&quot;fnref-6-2&quot; data-footnote-ref&gt;6&lt;/a&gt;&lt;/sup&gt; had converged on the same approach! Hilariously, we had both been working on Pomodoro timers.&lt;/p&gt;
&lt;p&gt;Up next? A Raycast extension for Comodoro&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-8&quot; id=&quot;fnref-8&quot; data-footnote-ref&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;@/notes/multi-uis-with-grpc.md&quot;&gt;Multi-UIs for a daemon and using gRPC to communicate locally from Rust &lt;&gt; Swift&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt; &lt;a href=&quot;#fnref-1-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1-2&quot; aria-label=&quot;Back to reference 1-2&quot;&gt;↩&lt;sup class=&quot;footnote-ref&quot;&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/thesis&quot;&gt;Technology-supported activities through realtime, distributed, and collaborative interfaces&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/raycast/extensions/pull/4080&quot;&gt;[New Extension] Apple Mail #4080&lt;/a&gt; &lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;3&quot; aria-label=&quot;Back to reference 3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/soywod/himalaya&quot;&gt;Himalaya (CLI)&lt;/a&gt; &lt;a href=&quot;#fnref-4&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;4&quot; aria-label=&quot;Back to reference 4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-5&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raycast.com/jns/himalaya&quot;&gt;Himalaya (Raycast)&lt;/a&gt; &lt;a href=&quot;#fnref-5&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;5&quot; aria-label=&quot;Back to reference 5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-6&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/soywod&quot;&gt;@soywood&lt;/a&gt; &lt;a href=&quot;#fnref-6&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;6&quot; aria-label=&quot;Back to reference 6&quot;&gt;↩&lt;/a&gt; &lt;a href=&quot;#fnref-6-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;6-2&quot; aria-label=&quot;Back to reference 6-2&quot;&gt;↩&lt;sup class=&quot;footnote-ref&quot;&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-8&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://pimalaya.org/comodoro/&quot;&gt;Comodoro&lt;/a&gt; &lt;a href=&quot;#fnref-8&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;7&quot; aria-label=&quot;Back to reference 7&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>raycast-extension-for-himalaya-released</id>
    <title>Raycast extension for Himalaya released</title>
    <updated>2023-04-29T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/hyper-key-without-karabiner-elements"/>
    <content type="html">&lt;p&gt;I came across a blog post&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt; about using &lt;code&gt;hidutil&lt;/code&gt; on macOS. As much as I&apos;m thankful for those who worked on Karabiner Elements, I&apos;m happy to remove a dependency!&lt;/p&gt;
&lt;p&gt;This was a simple change to my dotfiles&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;. I had already used the builtin macOS ability to remap a modifier, which I had done from caps lock to ESC, which I had to remove.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://amitp.blogspot.com/2023/04/mac-keyboard-with-hidutil.html&quot;&gt;Mac keyboard with hidutil&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/dotfiles/commit/ee0e45ac0fc68ba055f73011b5a025c992fd5984&quot;&gt;dotfiles#ee0e45ac0fc68ba055f73011b5a025c992fd5984&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>hyper-key-without-karabiner-elements</id>
    <title>Hyper key without Karabiner Elements</title>
    <updated>2023-04-13T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/safari-opening-without-windows"/>
    <content type="html">&lt;p&gt;This is one of those, &quot;I don&apos;t know why it broke but here&apos;s what fixed it&quot;. Safari started opening without any windows—private or otherwise.&lt;/p&gt;
&lt;p&gt;Using AppCleaner&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;, search for &quot;Safari&quot;. I removed everything except what&apos;s remaining in this screenshot. If there&apos;s permission issues, use a terminal or Finder.&lt;/p&gt;
&lt;p&gt;NB: Be &lt;em&gt;wise&lt;/em&gt; in what you delete.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://freemacsoft.net/appcleaner/&quot;&gt;AppCleaner&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>safari-opening-without-windows</id>
    <title>Safari opening without windows</title>
    <updated>2023-01-23T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/serialise-and-deserialise-enums-with-named-associated-values-from-rust-swift"/>
    <content type="html">&lt;p&gt;Between Rust and Serde and Swift and &lt;code&gt;Codable&lt;/code&gt;, it&apos;s &lt;em&gt;relatively&lt;/em&gt; easy to serialise and deserialise between the 2, using JSON. Whilst there aren&apos;t shared definitions through a common format, such as Protobuf or MessagePack, for simple data it looks to be maintainable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serde_derive&lt;/code&gt; and &lt;code&gt;Codable&lt;/code&gt; ideally save you writing encoders/serialisers and decoders/deserialisers. For Rust → Swift, I&apos;ve so far had to write a decoder for enums with named associated values. Both Rust and Swift use nth-indexing for unnamed associated values, so I don&apos;t &lt;em&gt;think&lt;/em&gt; it would be too hard. Without associated values, decoding worked without having to write anything for decoding.&lt;/p&gt;
&lt;p&gt;Here are small snippets of the types and decoder.&lt;/p&gt;
&lt;p&gt;Rust&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-rust&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ahl-special&quot; style=&quot;color: #61AFEF;&quot;&gt;derive&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;PartialEq&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Deserialize&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Serialize&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;ahl-keyword ahl-storage ahl-type&quot; style=&quot;color: #E06C75;&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ahl-type ahl-enum variant&quot; style=&quot;color: #E5C07B;&quot;&gt;Paused&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;duration&lt;/span&gt;: &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ahl-type ahl-enum variant&quot; style=&quot;color: #E5C07B;&quot;&gt;Stopped&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ahl-type ahl-enum variant&quot; style=&quot;color: #E5C07B;&quot;&gt;Working&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;duration&lt;/span&gt;: &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ahl-type ahl-enum variant&quot; style=&quot;color: #E5C07B;&quot;&gt;TakingShortBreak&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;duration&lt;/span&gt;: &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ahl-type ahl-enum variant&quot; style=&quot;color: #E5C07B;&quot;&gt;TakingLongBreak&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-other ahl-member&quot; style=&quot;color: #E06C75;&quot;&gt;duration&lt;/span&gt;: &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-swift&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;@&lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;macOS&lt;/span&gt; &lt;span class=&quot;ahl-constant ahl-numeric integer&quot; style=&quot;color: #D19A66;&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-constant ahl-numeric integer&quot; style=&quot;color: #D19A66;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Paused&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Stopped&lt;/span&gt;
    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Working&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;TakingShortBreak&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;TakingLongBreak&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Paused&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Stopped&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Working&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;TakingShortBreak&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;TakingLongBreak&lt;/span&gt;
    &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;AdditionalCodingKeys&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;secs&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;nanos&lt;/span&gt;
    &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;ahl-constructor&quot; style=&quot;color: #61AFEF;&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable ahl-parameter&quot; style=&quot;color: #E06C75;&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-parameter&quot; style=&quot;color: #E06C75;&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;container&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-parameter&quot; style=&quot;color: #E06C75;&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;singleValueContainer&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;ahl-keyword ahl-control ahl-conditional&quot; style=&quot;color: #C678DD;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;try?&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;ahl-comment&quot; style=&quot;font-style: italic; color: #5C6370;&quot;&gt;&amp;#x2f;&amp;#x2f; For when it&amp;#x27;s &quot;state&quot;:&quot;Stopped&quot;&lt;/span&gt;
            &lt;span class=&quot;ahl-keyword ahl-control ahl-conditional&quot; style=&quot;color: #C678DD;&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;Stopped&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;ahl-variable ahl-builtin&quot; style=&quot;color: #61AFEF;&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Stopped&lt;/span&gt;
            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;Unexpected value &lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-special&quot; style=&quot;color: #ABB2BF;&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-special&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;ahl-comment&quot; style=&quot;font-style: italic; color: #5C6370;&quot;&gt;&amp;#x2f;&amp;#x2f; For when &quot;state&quot;:{&quot;Working&quot;:{&quot;duration&quot;:{&quot;secs&quot;:1,&quot;nanos&quot;:0}}}&lt;/span&gt;
            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;values&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;ahl-variable ahl-parameter&quot; style=&quot;color: #E06C75;&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;ahl-comment&quot; style=&quot;font-style: italic; color: #5C6370;&quot;&gt;&amp;#x2f;&amp;#x2f; Dynamically get the CodingKey for the State from its enum&lt;/span&gt;
            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stateKey&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;allKeys&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;first&lt;/span&gt;!
            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stateContainer&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;AdditionalCodingKeys&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stateKey&lt;/span&gt;
            &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;durationKey&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stateContainer&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;allKeys&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;first&lt;/span&gt;!
            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;durationContainer&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stateContainer&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;AdditionalCodingKeys&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;durationKey&lt;/span&gt;
            &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;nanos&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;durationContainer&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;nanos&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;secs&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;durationContainer&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;nanoseconds&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;nanos&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;state&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;ahl-keyword ahl-control ahl-conditional&quot; style=&quot;color: #C678DD;&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stateKey&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stringValue&lt;/span&gt; &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;Paused&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;Paused&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;Working&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;Working&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;TakingShortBreak&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;TakingShortBreak&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;TakingLongBreak&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ahl-type&quot; style=&quot;color: #E5C07B;&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;TakingLongBreak&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;ahl-keyword&quot; style=&quot;color: #E06C75;&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;ahl-function&quot; style=&quot;color: #61AFEF;&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;Unexpected value &lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-special&quot; style=&quot;color: #ABB2BF;&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stateKey&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-delimiter&quot; style=&quot;color: #ABB2BF;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-special&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ahl-string&quot; style=&quot;color: #98C379;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;ahl-comment&quot; style=&quot;font-style: italic; color: #5C6370;&quot;&gt;&amp;#x2f;&amp;#x2f; Fake&lt;/span&gt;
            &lt;span class=&quot;ahl-variable ahl-builtin&quot; style=&quot;color: #61AFEF;&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;ahl-operator&quot; style=&quot;color: #C678DD;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ahl-variable&quot; style=&quot;color: #ABB2BF;&quot;&gt;state&lt;/span&gt;
        &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;ahl-punctuation ahl-bracket&quot; style=&quot;color: #ABB2BF;&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/y-pomodoro/blob/5e808a251db8971c8987b6f9cd738d5173ba8adc/core/src/lib.rs#L45&quot;&gt;jesse-c/y-pomodoro/blob/5e808a251db8971c8987b6f9cd738d5173ba8adc/core/src/lib.rs&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/y-pomodoro/blob/5e808a251db8971c8987b6f9cd738d5173ba8adc/client/Sources/pomodoro/pomodoro.swift#L72&quot;&gt;jesse-c/y-pomodoro/blob/5e808a251db8971c8987b6f9cd738d5173ba8adc/client/Sources/pomodoro/pomodoro.swift&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>serialise-and-deserialise-enums-with-named-associated-values-from-rust-swift</id>
    <title>Serialise and deserialise enums with named associated values from Rust → Swift</title>
    <updated>2023-01-02T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/compile-tree-sitter-langs-for-emacs-29-on-an-m1"/>
    <content type="html">&lt;p&gt;Recently I tried Emacs 29&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt; and began slimming down my config&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;. Following the Tree-sitter starter guide&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-3&quot; id=&quot;fnref-3&quot; data-footnote-ref&gt;3&lt;/a&gt;&lt;/sup&gt;, I couldn&apos;t figure out why I wasn&apos;t able to start the appropriate mode. I would get errors along the lines of, &lt;code&gt;Cannot activate tree-sitter, because language definition for ...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After double-checking file paths and names, I compared my local build output of the recommend build script&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-4&quot; id=&quot;fnref-4&quot; data-footnote-ref&gt;4&lt;/a&gt;&lt;/sup&gt; to the provided release—which &lt;em&gt;did&lt;/em&gt; work .&lt;/p&gt;
&lt;p&gt;The provided release was compiled for &lt;code&gt;x86_64&lt;/code&gt; and my local build output was for &lt;code&gt;arm64&lt;/code&gt;. That wasn&apos;t wrong, as I &lt;em&gt;am&lt;/em&gt; on an M1.&lt;/p&gt;
&lt;p&gt;Here&apos;s the a simple and lazy to compile for &lt;code&gt;x64_64&lt;/code&gt; and have it work: &lt;code&gt;arch -x86_64 ./batch.sh&lt;/code&gt;&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jimeh/emacs-builds&quot;&gt;jimeh/emacs-builds&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/emacs/comments/zqdrnz/replacing_packages_with_more_stripped_down/&quot;&gt;Replacing packages with more &quot;stripped down&quot; packages&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/emacs-mirror/emacs/blob/master/admin/notes/tree-sitter/starter-guide&quot;&gt;Tree-sitter starter guide&lt;/a&gt; &lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;3&quot; aria-label=&quot;Back to reference 3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/casouri/tree-sitter-module&quot;&gt;casouri/tree-sitter-module&lt;/a&gt; &lt;a href=&quot;#fnref-4&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;4&quot; aria-label=&quot;Back to reference 4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>compile-tree-sitter-langs-for-emacs-29-on-an-m1</id>
    <title>Compile Tree-sitter langs for Emacs 29 on an M1</title>
    <updated>2022-12-20T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/brewfile-app-relaunched"/>
    <content type="html">&lt;p&gt;I&apos;ve relaunched this app!&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt; The short version is that it&apos;s the &lt;a href=&quot;https://gitignore.io&quot;&gt;gitignore.io&lt;/a&gt; equivalent for Homebrew Brewfiles.&lt;/p&gt;
&lt;p&gt;There&apos;s work to do, but, it&apos;s in a reliable and reproducible state.&lt;/p&gt;
&lt;p&gt;Previously, it was on a VPS running FreeBSD and was using jails with Nginx and Puma. Now, it&apos;s still on a VPS, but it&apos;s running Debian and is using containers with Caddy and Puma.&lt;/p&gt;
&lt;p&gt;I do not regret using FreeBSD and jails. I learnt from it and would consider using them again, project-dependent.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://brewfile.app&quot;&gt;brewfile.app&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>brewfile-app-relaunched</id>
    <title>Brewfile app relaunched</title>
    <updated>2022-12-15T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/v1-release-of-appearancenotifier"/>
    <content type="html">&lt;p&gt;v0.0.1 was released on 2021-06-09&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;. Since then, I&apos;ve been using it daily both at home and at work. After a lazy approach to auto-starting it&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;, I added a daemon definition for macOS with &lt;code&gt;launchd&lt;/code&gt;. Recently as well, I added Emacs support.&lt;/p&gt;
&lt;p&gt;With these changes, I remembered to do a release, giving us v1!&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-3&quot; id=&quot;fnref-3&quot; data-footnote-ref&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/AppearanceNotifier/releases/tag/v0.0.1&quot;&gt;Initial release&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/dotfiles/commit/7d46082baecb3e1440dd17c0c26fc3d2fd4e3cb6&quot;&gt;dotfiles#7d46082baecb3e1440dd17c0c26fc3d2fd4e3cb6&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/AppearanceNotifier/releases/tag/v1.0.0&quot;&gt;v1 release&lt;/a&gt; &lt;a href=&quot;#fnref-3&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;3&quot; aria-label=&quot;Back to reference 3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>v1-release-of-appearancenotifier</id>
    <title>v1 release of AppearanceNotifier</title>
    <updated>2022-12-08T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/custom-zola-project-type-for-projectile"/>
    <content type="html">&lt;p&gt;I currently use Zola for this website and use Emacs as my editor with &lt;a href=&quot;https://github.com/bbatsov/projectile&quot;&gt;Projectile&lt;/a&gt;. Here&apos;s a snippet from my dotfiles to add support for Zola projects to Projectile&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-diff&quot; translate=&quot;no&quot;&gt;&lt;span class=&quot;ahl-markup ahl-bold&quot; style=&quot;font-weight: bold; color: #D19A66;&quot;&gt;diff --git a&amp;#x2f;home&amp;#x2f;private_dot_config&amp;#x2f;emacs&amp;#x2f;init.el b&amp;#x2f;home&amp;#x2f;private_dot_config&amp;#x2f;emacs&amp;#x2f;init.el&lt;/span&gt;
index &lt;span class=&quot;ahl-constant&quot; style=&quot;color: #56B6C2;&quot;&gt;c8d15dc&lt;/span&gt;..&lt;span class=&quot;ahl-constant&quot; style=&quot;color: #56B6C2;&quot;&gt;a3f9260&lt;/span&gt; 100644
&lt;span class=&quot;ahl-diff ahl-minus&quot; style=&quot;color: #E06C75;&quot;&gt;--- a&amp;#x2f;home&amp;#x2f;private_dot_config&amp;#x2f;emacs&amp;#x2f;init.el&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+++ b&amp;#x2f;home&amp;#x2f;private_dot_config&amp;#x2f;emacs&amp;#x2f;init.el&lt;/span&gt;
&lt;span class=&quot;ahl-attribute&quot; style=&quot;color: #E5C07B;&quot;&gt;@@ -797,7 +797,19 @@&lt;/span&gt;
   :config
   (setq projectile-project-search-path &amp;#x27;(&quot;~&amp;#x2f;Documents&amp;#x2f;projects&amp;#x2f;&quot; (&quot;~&amp;#x2f;src&amp;#x2f;&quot; . 3)))
   (setq projectile-auto-discover nil)
&lt;span class=&quot;ahl-diff ahl-minus&quot; style=&quot;color: #E06C75;&quot;&gt;-  :init (counsel-projectile-mode))&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+  :init (counsel-projectile-mode)&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+  (projectile-register-project-type&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+   &amp;#x27;zola&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+   &amp;#x27;(&quot;config.toml&quot; &quot;content&quot; &quot;static&quot; &quot;templates&quot; &quot;themes&quot;)&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+   :project-file &quot;config.toml&quot;&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+   :compile &quot;zola build&quot;&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+   :test &quot;zola check&quot;&lt;/span&gt;
&lt;span class=&quot;ahl-diff ahl-plus&quot; style=&quot;color: #98C379;&quot;&gt;+   :run &quot;zola server&quot;))&lt;/span&gt;

 ;; Make Ivy a bit more friendly by adding information to ivy buffers, e.g. description of commands in Alt-x, meta info when switching buffers, etc.
 (use-package ivy-rich
&lt;/code&gt;&lt;/pre&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.projectile.mx/projectile/projects.html&quot;&gt;https://docs.projectile.mx/projectile/projects.html&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>custom-zola-project-type-for-projectile</id>
    <title>Custom Zola project type for Projectile</title>
    <updated>2022-11-06T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/counting-pages-in-sections-from-other-sections-in-zola"/>
    <content type="html">&lt;p&gt;For the design of this website (as of 2022-10-11), I wanted to include the number of pages in a section—e.g., in the menu. I found a post on the Zola forum&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt; where I learnt about the &lt;code&gt;get_section&lt;/code&gt; and a section&apos;s &lt;code&gt;pages&lt;/code&gt; variable. Then in the Tera documentation&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;, I found the &lt;code&gt;length&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Between the 2 of these, I&apos;m able to display the pages count.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;autumn-hl&quot; style=&quot;background-color: #282C34; color: #ABB2BF;&quot;&gt;&lt;code class=&quot;language-plaintext&quot; translate=&quot;no&quot;&gt;{% set notes = get_section(path=&quot;notes&amp;#x2f;_index.md&quot;) -%}
{{ notes.pages | length }}
&lt;/code&gt;&lt;/pre&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://zola.discourse.group/t/section-vs-page/522/8&quot;&gt;https://zola.discourse.group/t/section-vs-page/522/8 ↗&lt;/a&gt; &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://tera.netlify.app/docs/#length&quot;&gt;https://tera.netlify.app/docs/#length ↗&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>counting-pages-in-sections-from-other-sections-in-zola</id>
    <title>Counting pages in sections from other sections in Zola</title>
    <updated>2022-10-11T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/multi-uis-for-a-daemon-and-using-grpc-to-communicate-locally-from-rust-swift"/>
    <content type="html">&lt;h1&gt;Multi-UIs Discovery of a paradigm&lt;/h1&gt;
&lt;p&gt;While building an extension for &lt;a href=&quot;https://www.raycast.com/jns/sabnzbd&quot;&gt;SABnzbd&lt;/a&gt; for &lt;a href=&quot;https://www.raycast.com&quot;&gt;Raycast&lt;/a&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-1&quot; id=&quot;fnref-1&quot; data-footnote-ref&gt;1&lt;/a&gt;&lt;/sup&gt;, it made me think about a paradigm of multiple UIs. I interact with SABnzbd through its web UI, Raycast, and NZBHydra 2. There may even be another way that I&apos;m not remembering.&lt;/p&gt;
&lt;p&gt;The paradigm I thought of from this, and added to my projects list, was something like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The name that I gave the project/idea was &quot;headless for everything&quot;, where headless is the daemon, in that drawing.&lt;/p&gt;
&lt;p&gt;Some clients are local, while some are remote, like &quot;Export to website&quot;. There are more and more local- and offline-first projects. What if you could export your data to another service? Chuck some local issues/tickets up in Jira and Linear? What if you could E2E as part of that? What if it could realtime, distributed, and collaborative? This is a concept I covered with my undergraduate thesis&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn-2&quot; id=&quot;fnref-2&quot; data-footnote-ref&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The obvious—and huge—downside is that adding a network in-between brings all the issues that a network inherently has. Maybe &lt;a href=&quot;https://hyperfiddle.notion.site/Demo-Photon-a-full-stack-Clojure-Script-dialect-with-compiler-managed-client-server-data-sync-57aee367c20e45b3b80366d1abe4fbc3&quot;&gt;Photon&lt;/a&gt; will help us out.&lt;/p&gt;
&lt;h1&gt;My first experiment with this paradigm&lt;/h1&gt;
&lt;p&gt;The Pomodoro technique has occasionally worked well for me. On macOS, I use &lt;a href=&quot;https://tomato2.app&quot;&gt;Tomato 2&lt;/a&gt;—and highly recommend it! A Pomodoro timer became the first experiment for me.&lt;/p&gt;
&lt;p&gt;The first version used sockets and an SQLite DB with the daemon and CLI client written in Rust. I wanted notifications though and with notarising/signing, I didn&apos;t like how I would send native macOS notifications.&lt;/p&gt;
&lt;p&gt;The second version got rid of SQLite and kept it all in memory to simplify it and used MessagePack.&lt;/p&gt;
&lt;p&gt;The third version, which is a work-in-progress, gets rid of sockets and uses gRPC for communication so that I can write a client in Swift. I did look around, and it seemed possible to use sockets with Swift, but again, I didn&apos;t like how I would&apos;ve had to do so.&lt;/p&gt;
&lt;h1&gt;Sample: How-to use gRPC to communicate between Rust &lt;&gt; Swift&lt;/h1&gt;
&lt;p&gt;Repository: &lt;a href=&quot;https://github.com/jesse-c/grpc-example-rust-swift&quot;&gt;https://github.com/jesse-c/grpc-example-rust-swift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While I plan on writing a step-by-step tutorial, in the desire to get this idea and sample out to the world, I&apos;ve published the repository.&lt;/p&gt;
&lt;section class=&quot;footnotes&quot; data-footnotes&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;I&apos;m still not decided on Raycast. I would go back to Alfred in a heartbeat if it wasn&apos;t so visually dated. &lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;1&quot; aria-label=&quot;Back to reference 1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jesse-c/thesis&quot;&gt;Technology-supported activities through realtime, distributed, and collaborative interfaces&lt;/a&gt; &lt;a href=&quot;#fnref-2&quot; class=&quot;footnote-backref&quot; data-footnote-backref data-footnote-backref-idx=&quot;2&quot; aria-label=&quot;Back to reference 2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>multi-uis-for-a-daemon-and-using-grpc-to-communicate-locally-from-rust-swift</id>
    <title>Multi-UIs for a daemon and using gRPC to communicate locally from Rust &lt;&gt; Swift</title>
    <updated>2022-06-24T00:00:00Z</updated>
  </entry>
  <entry>
    <link rel="alternate" href="https://j-e-s-s-e.com/notes/retrospective-on-a-side-project-autovolume-for-macos"/>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.jesseclaven.com/projects/AutoVolume/&quot;&gt;AutoVolume&lt;/a&gt; is a free and open source app that automatically changes the volume when your Mac wakes from sleep. I&apos;m going to give a brief overview from how it started, to being released.&lt;/p&gt;
&lt;h2&gt;Initial idea&lt;/h2&gt;
&lt;p&gt;From my &lt;code&gt;idea.md&lt;/code&gt; file for this, one night I had my volume up high because I was watching a TV show, and the next day when I received an email notification it was super loud, which was just a bit shocking and embarrassing. I wrote down the idea of, &apos;If sleep longer than time period x, show a notification on log in with action to mute&apos;. The end product ended up being similar.&lt;/p&gt;
&lt;p&gt;I took this as an opportunity to do a few other little things that I&apos;ve been wanting to do: design a website for the the first time in a while, create an animation, and code a website using no IDs or classes.&lt;/p&gt;
&lt;h2&gt;Finding time&lt;/h2&gt;
&lt;p&gt;I wrote down the idea on 16-06-26 and the first commit to the repository was on 16-12-18.  The most recent commit was on 17-04-05. From having the idea to releasing something took around 10 months. That wasn&apos;t because of difficulty in any part, but because it was very low priority to me—and that was okay!&lt;/p&gt;
&lt;p&gt;Staying true to the original idea and a minimum feature set was key as well. It made it easy to release it sooner and evaluate if people would use it, and how.&lt;/p&gt;
&lt;p&gt;A relatively large amount of time was spent on the animation. I searched for different ways to do it (e.g. using an animation code library) and settled on After Effects. While you can easily do it in AE, I was finding parts of the UX (importing lots of layers into AE) tedious. In the end I switched to Photoshop and created the animation in there in a few minutes.&lt;/p&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;The common saying of build something for your own problem was true—and it was satisfying seeing people say thank you, and that it was just what they wanted, either knowingly, or after reading what it did. I personally always have it running and have found it useful.&lt;/p&gt;
&lt;p&gt;It reached the #1 spot on Designer News which was cool to see. Someone posted it to Product Hunt on my behalf as well. I posted it to a private forum I&apos;m apart of as well. What was also satisying was seeing all the people star the repository on GitHub.&lt;/p&gt;
&lt;h2&gt;What&apos;s next&lt;/h2&gt;
&lt;p&gt;I already have my own TODO items, but people had suggestions from the get go. For now it does it&apos;s purpose and works &apos;perfectly&apos; in that regard, so I&apos;m going to leave it alone for a bit.&lt;/p&gt;
</content>
    <author>
      <name>Jesse Claven</name>
      <uri>https://j-e-s-s-e.com</uri>
    </author>
    <id>retrospective-on-a-side-project-autovolume-for-macos</id>
    <title>Retrospective on a side-project: AutoVolume for macOS</title>
    <updated>2017-04-19T00:00:00Z</updated>
  </entry>
</feed>